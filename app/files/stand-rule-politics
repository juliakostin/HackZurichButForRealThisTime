<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>NutsDB - Database of Databases</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="counter" content="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwayI6NjM2LCJpc3MiOiJjb3VudGVyOnN5c3RlbSIsIm5iZiI6MTY5NDYxNDM4N30.o-gmxhZGnPkIiqpWwGrZs6yrbnR_MiG0zUm9feeTG8M">
<script src="/cdn-cgi/apps/head/cMiHuBTCYiM0FotgIzjlp9WgBtc.js"></script><link href="/static/core/images/favicon.ico" rel="shortcut icon" type="image/png" />
<link rel="apple-touch-icon" sizes="32x32" href="/static/core/images/dbdb_io-32x32.png">
<link rel="apple-touch-icon" sizes="90x90" href="/static/core/images/dbdb_io-90x90.png">
<link rel="apple-touch-icon" sizes="180x180" href="/static/core/images/dbdb_io-180x180.png">
<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Open+Sans:400,300,700,800">
<link rel="stylesheet" href="//use.fontawesome.com/releases/v5.9.0/css/all.css">
<link rel="stylesheet" type="text/css" href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link rel="stylesheet" type="text/css" href="/static/lib/css/bootstrap-select.css">
<link rel="stylesheet" type="text/css" href="/static/core/css/base.css?v=2">
<link rel="stylesheet" type="text/css" href="/static/core/css/jquery.auto-complete.css">
<meta property="og:site_name" content="Database of Databases" />
<meta property="og:url" content="https://dbdb.io/db/nutsdb" />
<meta name="twitter:url" content="https://dbdb.io/db/nutsdb" />
<meta property="og:title" content="Database of Databases &mdash; NutsDB" />
<meta property="og:description" content="NutsDB is a transactional key/value store database written in Go. All transactions executed in NutsDB are fully serializable. Transactions are categorized into types based on their level of access. In other words, there are read-only and read-write transactions. Multiple read-only transactions are …" />
<meta property="og:type" content="article" />
<meta property="og:image" content="https://dbdb.io/media/twitter/nutsdb.png" />
<meta name="twitter:title" content="Database of Databases &mdash; NutsDB" />
<meta name="twitter:description" content="NutsDB is a transactional key/value store database written in Go. All transactions executed in NutsDB are fully serializable. Transactions are categorized into types based on their level of access. I…" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:image" content="https://dbdb.io/media/twitter/nutsdb.png" />
<link href="/static/core/css/system.css" rel="stylesheet">
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark">
<a class="navbar-brand" href="/">Database of Databases</a>
<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
<span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse" id="navbarSupportedContent">
<ul class="navbar-nav mr-auto">
<li class="nav-item">
<a class="nav-link btn btn-outline-secondary" href="/browse">Browse</a>
</li>
<li class="nav-item">
<a class="nav-link btn btn-outline-secondary" href="/stats">Leaderboards</a>
</li>
<li class="nav-item">
<a class="nav-link btn btn-outline-secondary" href="/recent">Recent</a>
</li>
<li class="nav-item ml-2 ">
<a class="nav-link btn btn-outline-secondary" href="/db/nutsdb/revisions/">Revision List</a>
</li>
</ul>
<form action="/browse" method="GET" id="topsearch" class="form-inline form-search my-2 my-lg-0 mr-4">
<div class="input-group">
<input type="search" class="form-control" placeholder="Search" aria-label="Search" id="top-searchbox" name="q" value>
<div class="input-group-append">
<button class="btn" type="submit">
<i class="fas fa-search"></i>
</button>
</div>
</div>
</form>
<ul class="navbar-nav my-2 my-lg-0 mr-4">
<li class="nav-item dropdown">
<a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
Accounts
</a>
<div class="dropdown-menu" aria-labelledby="navbarDropdown">
<a class="dropdown-item" href="/login/">Login</a>


</div>
</li>
</ul>
</div>
</nav>
<div class="jumbotron">
<div class="row justify-content-md-center system-content">

<div class="col-sm-12 col-md-7 order-2 order-md-1">
<div class="card has-citations">
<div class="card-body">
<h2 class="card-title">
NutsDB
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h2>
<p class="card-text">
<p>NutsDB is a transactional key/value store database written in Go. All transactions executed in NutsDB are fully serializable. Transactions are categorized into types based on their level of access. In other words, there are read-only and read-write transactions. Multiple read-only transactions are allowed at the same time, and they could, of course, read values from a bucket using a key or traverse the buckets to find a range of key-value pairs. However, only one read-write transaction is allowed at the same time and it could read, update and delete from the data storage.</p>
<p>The DBMS supports different data structures, such as list, set and sorted set.</p>
</p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div class="card has-citations">
<div class="card-body">
<h4 class="card-title">
History
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text"><p>NutsDB is developed mainly by a Chinese programmer named Jiajun Xu. The motivation is that the author wants a simpler, faster, and more persistent key/value store database system. The project started in December 2018. It is not derived or forked from any other database systems, but it does use Bitcask as its underlying the key/value store. The author further optimized it using B+ tree as index to compensate Bitcask's limitations in range and prefix scanning.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="data-model" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Data Model
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?data-model=keyvalue">Key/Value</a>
</p>
<p><p>NutsDB supports key/value storage and all key/value pairs are stored in buckets, in which all keys must be unique. However, the same keys are allowed in different buckets. </p>
<p>NutsDB adopted Bitcask, which is a log-structure key/value storage system. All the updates and write operations are appended to the end of the log. It does not support random read and write. Rather, to delete a value, it simply append a new record marking the old value as deleted. To update, it will directly append the new value, and the system will use the newest value always, according to the timestamp. Therefore, the old values, even though still exist in the file, are simply discarded. An obvious drawback is that the log file will become huge after running for a while or the amount of data processed is huge, therefore causing the launch of NutsDB to be slow since it needs to process the log file first. </p>
<p>It also supports other data structures: list, set and sorted set. The APIs follows <a href="https://redis.io/commands">Redis commands</a>.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="indexes" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Indexes
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?indexes=btree">B+Tree</a>
</p>
<p><p>NutsDB uses Bitcask as a key/value store. This model is fast and reliable, but it also introduces some shortcomings in terms of the performance. Traditional key/value store does not support range and prefix searching. To perform a scan, it needs to query the keys one by one, which is not desirable. Therefore, the author optimized it by incorporating B+ tree indexing to support easy scan and searching. With B+ tree, range query and prefix matching could be performed with ease. </p>
<p>Upon launch, there are three modes of indexing to read the log files to reconstruct the database, varying in the amount of memory required. The first mode, which caches indices and values entirely in memory at startup, is the default mode, which is the most memory consuming but the most efficient one. This mode is most suitable for situations when the memory is not an issue. The second mode, which only caches indices, is less memory consuming by storing values on disk and use the index to find the offsets of the values. This is most suitable when the number of values is much more than that of the keys. The last mode, which uses multilevel indexing, is the most memory efficient but the slowest one. since it does not requires too much memory but issues a lot of file seeks.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="isolation-levels" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Isolation Levels
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?isolation-levels=serializable">Serializable</a>
</p>
<p><p>NutsDB is claimed to be serializable. Based on Read-Write locks and the exclusiveness between Read-Only and Read-Write operations, each transaction would be isolated and serialized. At a certain time, only one Read-Write operation is allowed, which guarantees no write conflicts.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="logging" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Logging
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?logging=logical-logging">Logical Logging</a>
</p>
<p><p>Since NutsDB adopted Bitcask, it uses logging to record every single operation that made changes to the database. </p>
<p><strong>Insert</strong> Insertion of a data key/value pair is simply appending to the end of the logging file. If the log file results in a huge size (after running for a long time or a transaction that involves too many writes), it will start a new file but keep the old files. </p>
<p><strong>Delete</strong> Deletion is also simply appending to the end of the logging file by marking that value to be <code>deleted</code>. </p>
<p><strong>Update</strong> Update is also simply appending, and the database will keep track of the time stamp, since only the latest value is the valid ones. In other words, the values with old timestamps, even though still present in the logging file, will be discarded. </p>
<p><strong>Merge Logs</strong> Eventually, the log file will be too huge and NutsDB will initiate a <code>merge</code> operation to merge all the log files. It will remove all the duplicates, delete the values that are marked as deleted, and keep only the newest value with the latest timestamp during updates.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="query-interface" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Query Interface
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?query-interface=custom-api">Custom API</a>
</p>
<p><p>For ordinary key/value queries, NutsDB used its own APIs to insert, delete and update key/value pairs in the buckets. Since all the operations are monitored and organized by transactions, the API calls are made by transactions, or Tx. Using the transaction, one could put (insert), get and delete from the database with ease using the given APIs. These three operations are the main ones that could be used to query from the database using key/value pairs.</p>
<p>NutsDB also supports Prefix Scan and Range Scan, and further user has the option to limit the number of entries being returned. </p>
<p>For manipulating data structures such as List, Set and OrderedSet, NutsDB follows the traditions in the <a href="https://redis.io/commands">Redis commands</a>.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="storage-architecture" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Storage Architecture
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?storage-architecture=hybrid">Hybrid</a>
</p>
<p><p>NutsDB has different modes of storage. In all modes, the log files will be used, which is on disk, to reconstruct database. </p>
<p>For the first mode, it is the pure in-memory, and it is the most efficient one. However, memory usage would be the bottleneck here, especially when you don't have enough.</p>
<p>The second mode is partially in-memory and partially disk-oriented. Under this mode, NutsDB will store the values on the disk and use the key to get the offset for the corresponding values. It is more memory efficient, but it is slower. This is the most suitable when the values significantly outnumber the keys.</p>
<p>The third mode adopted multi-level indexing on disk, so it is understandable that while it is the most memory efficient, it is the slowest. </p>
<p>Overall, the second and the third mode supports larger-than-memory databases, since they will be querying from the disk.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="storage-model" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Storage Model
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?storage-model=custom">Custom</a>
</p>
<p><p>NutsDB used Bitcask to support key/value storage. There's no row or column in the database. There are, however, log records that are being appended to the log files.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="storage-organization" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Storage Organization
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?storage-organization=log-structured">Log-structured</a>
</p>
<p><p>The actual storage is following the Bitcask model with log-structured file tracking the changes of the database. It will keep a B+ tree indexing to search for the offset of the values stored on disk.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div id="views" class="card card-feature has-citations">
<div class="card-body">
<h4 class="card-title">
Views
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h4>
<p class="card-text">
<a class="badge badge-info" href="/browse?views=virtual-views">Virtual Views</a>
</p>
<p><p>NutsDB support all kinds of Views using the <strong>View</strong> APIs, In fact, there are only two kinds of operations supported, <strong>View</strong> and <strong>Update</strong>. The first one is responsible for all Read-Only tasks and the latter Read-Write tasks. To get a View, one could simply use Get discussed in the Query Interfaces to do a key/value query. Range Scan or PrefixScan are also supported. Finally, to View the whole database, one could get all the key/value pairs from all the buckets with one simple API call.</p></p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></li>
</ul>
</cite>
</div>
</div>
<div class="card card-version d-block d-md-none revision-card">
<a href="/db/nutsdb/revisions/" title="View All Revisions for NutsDB">
<div class="card-body">
Revision #8
&nbsp;|&nbsp;
<time datetime="2021-12-14T10:38:09.977000-05:00">
Updated 12/14/2021 10:38 a.m.
</time>
</div>
</a>
</div>

<div class="card d-block d-md-none systems-extra">
<div class="card-body">
<h4 class="card-title">
People Also Viewed
</h4>
<ul class="list-group list-group-flush">
<li class="list-group-item list-group-item-action">
<a href="/db/badgerdb" title="BadgerDB">
<img class="logo-recommendation" src="/media/logos/badgerdb.png.200x50_q85.png" alt="BadgerDB" />
</a>
</li>
<li class="list-group-item list-group-item-action">
<a href="/db/radondb" title="RadonDB">
<img class="logo-recommendation" src="/media/logos/radondb.png.200x50_q85.png" alt="RadonDB" />
</a>
</li>
<li class="list-group-item list-group-item-action">
<a href="/db/piladb" title="piladb">
<img class="logo-recommendation" src="/media/logos/piladb.png.200x50_q85.png" alt="piladb" />
</a>
</li>
<li class="list-group-item list-group-item-action">
<a href="/db/rosedb" title="RoseDB">
<img class="logo-recommendation" src="/media/logos/rosedb.png.200x50_q85.png" alt="RoseDB" />
</a>
</li>
</ul>
</div>
</div>

</div>


<div class=" col-sm-12 col-md-3 order-1 order-md-2">
<div class="card">
<div class="card-body text-center">
<a href="/media/logos/nutsdb-2021.png"><img class="logo-thumbnail" src="/media/logos/nutsdb-2021.png.280x250_q85.png" style="border:none;" alt="NutsDB Logo" title="NutsDB"></a>
</div>
</div>
<div class="card has-citations">
<div class="card-body">
<h6 class="card-title">Website</h6>
<p class="card-text"><a href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></p>
<h6 class="card-title">Source Code</h6>
<p class="card-text"><a href="https://github.com/xujiajun/nutsdb">https://github.com/xujiajun/nutsdb</a></p>
<h6 class="card-title">Tech Docs</h6>
<p class="card-text"><a href="https://xujiajun.cn/nutsdb/">https://xujiajun.cn/nutsdb/</a></p>
<h6 class="card-title">Developer</h6>
<p class="card-text">Jiajun Xu</p>
<link rel="stylesheet" href="/static/flags/sprite.css">
<h6 class="card-title">Country of Origin</h6>
<p class="card-text">
<a href="/browse?country=CN" title="View other systems from China">
<i class="flag-sprite flag-c flag-_n"></i>
CN
</a>
</p>
<h6 class="card-title">
Start Year
<a href="javascript:;" class="citations"><i class="fas fa-info-circle" title="Citations"></i></a>
</h6>
<p class="card-text">2018</p>
<cite class="hidden">
<ul>
<li><a target="_blank" href="https://github.com/xujiajun/nutsdb/commit/317d14e5a2eab61947185714088b2cdbb131dbe3">https://github.com/xujiajun/nutsdb/commit/317d14e5a2eab61947185714088b2cdbb131dbe3</a></li>
</ul>
</cite>
<h6 class="card-title">Project Type</h6>
<p class="card-text">
<a class="card-title" href="/browse?type=open-source" title="View other Open Source systems">Open Source</a>
</p>
<h6 class="card-title">Written in</h6>
<p class="card-text">
<a class="card-title" href="/browse?programming=go-lang" title="View other systems that are written in Go">Go</a>
</p>
<h6 class="card-title">Supported languages</h6>
<p class="card-text">
<a class="card-title" href="/browse?supported=go-lang" title="View other systems that support Go">Go</a>
</p>
<h6 class="card-title">Inspired By</h6>
<p class="card-text">
<a class="card-title" href="/browse?inspired=redis" title="View other systems inspired by Redis">Redis</a>
</p>
<h6 class="card-title">Operating Systems</h6>
<p class="card-text">
<a class="card-title" href="/browse?os=linux" title="View other systems that support Linux systems">Linux</a>, <a class="card-title" href="/browse?os=os-x" title="View other systems that support OS X systems">OS X</a>, <a class="card-title" href="/browse?os=windows" title="View other systems that support Windows systems">Windows</a>
</p>
<h6 class="card-title">Licenses</h6>
<p class="card-text">
<a class="card-title" href="/browse?license=apache-v2" title="View other systems that use Apache v2">Apache v2</a>
</p>
</div>
</div>
<div class="card card-version d-none d-md-block revision-card">
<a href="/db/nutsdb/revisions/" title="View All Revisions for NutsDB">
<div class="card-body">
Revision #8
&nbsp;|&nbsp;
<time datetime="2021-12-14T10:38:09.977000-05:00">
Updated 12/14/2021 10:38 a.m.
</time>
</div>
</a>
</div>

<div class="card d-none d-md-block systems-extra">
<div class="card-body">
<h4 class="card-title">
People Also Viewed
</h4>
<ul class="list-group list-group-flush">
<li class="list-group-item list-group-item-action">
<a href="/db/badgerdb" title="BadgerDB">
<img class="logo-recommendation" src="/media/logos/badgerdb.png.200x50_q85.png" alt="BadgerDB" />
</a>
</li>
<li class="list-group-item list-group-item-action">
<a href="/db/radondb" title="RadonDB">
<img class="logo-recommendation" src="/media/logos/radondb.png.200x50_q85.png" alt="RadonDB" />
</a>
</li>
<li class="list-group-item list-group-item-action">
<a href="/db/piladb" title="piladb">
<img class="logo-recommendation" src="/media/logos/piladb.png.200x50_q85.png" alt="piladb" />
</a>
</li>
<li class="list-group-item list-group-item-action">
<a href="/db/rosedb" title="RoseDB">
<img class="logo-recommendation" src="/media/logos/rosedb.png.200x50_q85.png" alt="RoseDB" />
</a>
</li>
</ul>
</div>
</div>

</div>

</div>
</div>
<footer class="font-small mdb-color pt-4">
<div class="container align-top">
<div class="row d-flex align-items-center ">
<div class="col-md-7 col-lg-8 footer-text">
<p class="text-center text-md-left">
Copyright &copy; 2023
&bullet;
<a target="_blank" href="https://db.cs.cmu.edu">Carnegie Mellon Database Group</a>
</p>
</div>
<div class="col-md-5 col-lg-4">
<div class="text-center text-md-right footer-text">
<a href="/cdn-cgi/l/email-protection#82efe3ebeec2e6e0e6e0acebed" class="btn-floating btn-sm rgba-white-slight"><i class="fa fa-envelope"></i> Contact</a>
<a href="https://github.com/cmu-db/dbdb.io" class="btn-floating btn-sm"><i class="fab fa-github"></i> Github</a>
</div>
</div>
</div>
</div>
</footer>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous" type="5dfe43bb00352a47b7848e9b-text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous" type="5dfe43bb00352a47b7848e9b-text/javascript"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous" type="5dfe43bb00352a47b7848e9b-text/javascript"></script>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-4067813-21" type="5dfe43bb00352a47b7848e9b-text/javascript"></script>
<script type="5dfe43bb00352a47b7848e9b-text/javascript">
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'UA-4067813-21');
</script>

<script type="5dfe43bb00352a47b7848e9b-text/javascript">
    function convertToSlug(text) {
        return text
            .toLowerCase()
            .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
            .replace(/[^\w -]+/g,'')
            .replace(/ +/g,'-');
    }
</script>

<script src="/static/core/js/jquery.auto-complete.min.js" type="5dfe43bb00352a47b7848e9b-text/javascript"></script>
<script type="5dfe43bb00352a47b7848e9b-text/javascript">
    // Top Search Box
    $("#topsearch").find('input[name="q"]').autoComplete({
        minChars: 3,
        source: function(term, response) {
            $.getJSON('/search/autocomplete/', { q: term }, function(data) { response(data); });
        },
        onSelect: function(e, term, item) { window.location.href = "/db/" + convertToSlug(term); }
    });
</script>
<script src="/static/lib/js/bootstrap.bundle.js" type="5dfe43bb00352a47b7848e9b-text/javascript"></script>
<script src="/static/core/js/system.js" type="5dfe43bb00352a47b7848e9b-text/javascript"></script>
<script src="/cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js" data-cf-settings="5dfe43bb00352a47b7848e9b-|49" defer></script></body>
</html>
